{"version":3,"sources":["airports.json","vertices.js","shaders/flights.frag","shaders/flights.vert","shaders/borders.frag","shaders/borders.vert","shaders/texture.frag","shaders/texture.vert","main.js"],"names":["module","exports","compute_flight_paths","buffer","array","Uint16Array","depart_centers","arrive_centers","point_index","i","length","depart_lon","depart_lat","depart_china","airports","arrive_lon","arrive_lat","arrive_china","j","push","a_depart_center","a_arrive_center","compute_borders","count","Uint32Array","indices","coords","Float32Array","vertices","v","len","a","b","regl","base","getBorders","fetch","borderData","then","response","arrayBuffer","getTexture","filename","Promise","resolve","image","Image","src","crossOrigin","onload","texture","data","flipY","getFlights","flightData","longitude_offset","prop","createLineDrawer","frag","bordersFrag","vert","bordersVert","uniforms","aspectRatio","blend","enable","func","dst","depth","attributes","position","primitive","main","borders","flights","landTexture","monoTexture","planeTexture","all","specImg","monoImg","planeImg","drawBorders","drawFlights","flightsFrag","flightsVert","elapsed","speed","size","drawTexture","textureFrag","textureVert","frame","time","viewportWidth","viewportHeight","ar","catch","console","error"],"mappings":";;;;;AAAAA,OAAOC,QAAQ,CAAC,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,KAAK,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,OAAO,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,MAAM,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,MAAM,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,EAAE,QAAQ,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAA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","file":"main.c9a9f5e5.js","sourceRoot":"..","sourcesContent":["module.exports=[[116.585,40.0801,0],[28.8146,40.9769,0],[121.805,31.1434,1],[-79.6306,43.6772,0],[-73.7408,45.4706,0],[121.336,31.1979,1],[120.374,36.2661,1],[106.3327,27.8164,1],[-118.408,33.9425,0],[-73.7789,40.6398,0],[114.208,30.7838,1],[113.299,23.3924,1],[-77.4558,38.9445,0],[151.177,-33.9461,0],[123.483,41.6398,1],[118.8736,34.5717,1],[103.947,30.5785,1],[117.216,36.8572,1],[-122.375,37.619,0],[120.9872,37.6572,1],[38.7993,8.9779,0],[51.1522,35.4161,0],[113.811,22.6393,1],[102.9292,25.1019,1],[55.3644,25.2528,0],[113.22,28.1892,1],[73.5291,4.1918,0],[28.7519,41.2753,0],[-89.9767,35.0424,0],[31.4056,30.1219,0],[136.407,36.3946,0],[54.6511,24.433,0],[103.994,1.3502,0],[8.5706,50.0333,0],[120.434,30.2295,1],[51.6081,25.2731,0],[108.752,34.4471,1],[138.531,-34.945,0],[2.55,49.0128,0],[103.62,36.5152,1],[109.294,21.5394,1],[-123.184,49.1939,0],[174.792,-37.0081,0],[12.2389,41.8003,0],[119.663,25.9351,1],[4.7639,52.3086,0],[79.8841,7.1808,0],[11.6903,48.1378,0],[50.0467,40.4675,0],[172.532,-43.4894,0],[153.117,-27.3842,0],[144.843,-37.6733,0],[106.642,29.7192,1],[113.841,34.5197,1],[-3.5626,40.4719,0],[122.362,29.9342,1],[-9.1359,38.7813,0],[37.4146,55.9726,0],[24.9633,60.3172,0],[16.5697,48.1103,0],[2.0785,41.2971,0],[-.1903,51.1481,0],[110.459,19.9349,1],[130.2706,30.7847,0],[8.7281,45.6306,0],[101.71,2.7456,0],[4.4844,50.9014,0],[109.412,18.3029,1],[-2.275,53.3537,0],[126.25,45.6234,1],[60.8027,56.7431,0],[6.109,46.2381,0],[44.2346,33.2625,0],[92.4933,56.1729,0],[103.813,13.4107,0],[77.0405,43.3521,0],[82.6507,55.0126,0],[71.4669,51.0222,0],[103.637,10.5797,0],[114.1981,22.3203,0],[-149.996,61.1744,0],[117.346,39.1244,1],[98.3169,8.1132,0],[135.244,34.4273,0],[140.386,35.7647,0],[6.2044,49.6233,0],[100.747,13.6811,0],[88.4467,22.6547,0],[104.389,52.268,0],[127.412,50.4254,0],[72.8679,19.0887,0],[124.926,1.5493,0],[77.1031,28.5665,0],[122.376,11.6794,0],[90.3978,23.8433,0],[118.862,31.742,1],[7.1427,50.8659,0],[100.062,9.5478,0],[100.607,13.9126,0],[5.4432,50.6374,0],[115.9,28.865,1],[74.4776,43.0613,0],[136.805,34.8584,0],[56.0212,57.9145,0],[98.9626,18.7668,0],[104.844,11.5466,0],[113.376,22.0064,1],[112.388,34.7411,1],[80.1693,12.99,0],[116.4109,39.5099,1],[12.2364,51.4239,0],[127.4987,36.717,0],[118.128,24.544,1],[119.3244,35.405,1],[125.685,43.9962,1],[114.928,4.9442,0],[114.697,38.2807,1],[104.741,31.4281,1],[106.801,26.5385,1],[112.628,37.7469,1],[102.184,27.9891,1],[121.02,14.5086,0],[120.852,27.9122,1],[120.032,29.3447,1],[129.569,44.5241,1],[100.76,21.9739,1],[119.779,31.9197,1],[100.319,25.6494,1],[118.59,24.7964,1],[116.5033,23.552,1],[86.1289,41.6978,1],[121.539,38.9657,1],[106.3932,38.3228,1],[112.628,26.9053,1],[118.001,27.7019,1],[119.7198,32.5634,1],[109.485,30.3203,1],[120.429,31.4944,1],[117.298,31.78,1],[120.2031,33.4258,1],[114.93,40.7386,1],[121.462,29.8267,1],[127.6022,42.0669,1],[87.4742,43.9071,1],[102.043,36.5275,1],[108.172,22.6083,1],[111.824,40.8514,1],[105.393,28.8522,1],[114.3062,27.8025,1],[118.908,42.235,1],[109.391,24.2075,1],[117.5553,34.0591,1],[110.358,21.2144,1],[57.6836,-20.4302,0],[111.6412,36.1326,1],[114.6,23.05,1],[106.1626,30.7954,1],[117.6856,30.7403,1],[105.702,32.3911,1],[79.8649,37.0385,1],[107.603,35.7997,1],[58.2844,23.5933,0],[114.7789,25.8533,1],[111.48,30.5566,1],[118.899,28.9658,1],[119.825,49.205,1],[115.167,-8.7482,0],[100.246,26.68,1],[105.1545,37.5731,1],[113.278,29.314,1],[106.652,10.8188,0],[104.545,28.8006,1],[118.412,35.0461,1],[115.7344,32.8822,1],[105.86,34.5594,1],[84.9527,45.4665,1],[55.8744,54.5575,0],[101.7985,26.54,1],[117.05,30.5822,1],[110.039,25.2181,1],[107.0007,27.5895,1],[98.5317,24.4011,1],[112.9692,38.5975,1],[110.443,29.1028,1],[112.291,32.1506,1],[122.229,37.1871,1],[111.64,28.9189,1],[113.482,40.0603,1],[119.119,36.6467,1],[118.256,29.7333,1],[120.976,32.0708,1],[108.433,30.8017,1],[140.415,36.1811,0],[119.125,33.7908,1],[109.8614,39.49,1],[107.206,33.1341,1],[99.1683,25.0533,1],[117.8336,26.4263,1],[106.7993,39.7934,1],[105.5886,38.7483,1],[109.5909,38.3597,1],[109.554,36.6369,1],[119.0589,39.6664,1],[122.854,41.1053,1],[111.0314,35.1164,1],[114.737,26.8569,1],[109.3089,27.8833,1],[129.451,42.8828,1],[117.9643,28.3797,1],[118.788,37.5086,1],[121.233,25.0777,0],[104.9594,25.0864,1],[107.4295,31.1302,1],[126.493,33.5113,0],[120.56,15.186,0],[98.4858,24.9381,1],[113.07,23.0833,1],[114.0791,32.5408,1],[94.3353,29.3033,1],[110.4548,19.1382,1],[131.193,45.293,1],[99.3736,23.2739,1],[80.2917,41.2625,1],[90.9119,29.2978,1],[55.1614,24.8964,0],[117.33,49.5667,1],[113.592,22.1496,0],[95.9779,21.7022,0],[117.176,29.3386,1],[81.3303,43.9558,1],[121.429,28.5622,1],[112.615,32.9808,1],[100.7593,27.5403,1],[106.2169,36.0789,1],[113.126,36.2475,1],[123.918,47.2396,1],[121.062,41.1014,1],[93.6692,42.8414,1],[110.642,26.802,1],[141.692,42.7752,0],[126.451,37.4691,0],[125.1406,46.7464,1],[106.6449,31.7384,1],[76.02,39.5429,1],[82.8729,41.6779,1],[116.133,24.35,1],[111.248,23.4567,1],[105.807,21.2212,0],[127.646,26.1958,0],[105.8733,26.2606,1],[111.1428,37.6833,1],[118.0026,39.7178,1],[122.0083,46.1953,1],[109.219,11.9982,0],[126.791,37.5583,0],[102.3483,38.5422,1],[100.3011,34.4181,1],[106.767,47.8431,0],[110.9078,32.5917,1],[106.656,-6.1256,0],[122.7675,47.8658,1],[106.96,23.7206,1],[145.729,15.119,0],[128.6553,35.8969,0],[139.78,35.5523,0],[100.959,22.7933,1],[109.7,27.4411,1],[85.3591,27.6966,0],[105.4721,27.2671,1],[99.8829,19.9523,0],[100.025,23.7381,1],[138.1878,34.796,0],[99.7864,22.4158,1],[128.938,35.1795,0],[118.0739,41.1225,1],[108.8311,29.5133,1],[102.563,17.9883,0],[112.0967,43.4225,1],[96.1332,16.9073,0],[134.016,34.2142,0],[103.755,27.3256,1],[109.997,40.56,1],[107.7428,40.926,1],[121.552,25.0694,0],[115.964,43.9156,1],[89.0987,43.0308,1],[116.051,5.9372,0],[-.4619,51.4706,0],[105.797,33.788,1],[-95.3414,29.9844,0],[74.4036,31.5216,0],[122.3586,40.5425,1],[99.5543,31.7574,1],[123.0197,45.5053,1],[130.465,46.8434,1],[122.2,43.5567,1],[100.0533,29.3231,1],[113.1081,41.1297,1],[94.8092,40.1611,1],[120.35,22.5771,0],[130.451,33.5859,0],[98.3414,39.8569,1],[8.5492,47.4647,0],[132.6603,47.11,1],[89.3114,29.3519,1],[99.6772,27.7936,1],[102.3522,32.5315,1],[116.747,25.6747,1],[134.3664,48.1995,1],[113.306,52.0263,0],[116.3467,35.2928,1],[127.3089,50.1716,1],[97.0364,32.8364,1],[123.979,10.3075,0],[98.9862,8.0991,0],[129.0191,47.7521,1],[131.737,33.4794,0],[88.0858,47.7499,1],[-74.1687,40.6925,0],[126.133,48.445,1],[101.005,12.6799,0],[-83.3534,42.2124,0],[100.675,38.8019,1],[124.286,40.0247,1],[125.7033,42.2539,1],[97.1083,30.5536,1],[-87.9048,41.9786,0],[-84.4281,33.6367,0],[-122.309,47.449,0],[94.7861,36.4006,1],[104.979,26.6094,1],[-71.0052,42.3643,0],[114.35,30.7,1],[104.3255,23.5583,1],[120.435,41.5381,1],[108.199,16.0439,0],[112.345,16.8336,1],[126.3828,34.9914,0],[114.4256,36.5258,1],[12.656,55.6179,0],[-122.302,47.53,0],[102.161,19.8973,0],[46.6988,24.9576,0],[19.2611,47.4298,0],[17.9186,59.6519,0],[88.0083,38.9747,1],[77.0752,38.2811,1],[14.26,50.1008,0],[116.388,39.7828,1],[20.9671,52.1657,0],[100.277,5.2971,0],[133.855,34.7569,0],[120.621,24.2647,0],[132.919,34.4361,0],[103.9931,10.1698,0],[-97.038,32.8968,0],[101.549,3.1306,0],[107.988,26.972,1],[44.9547,41.6692,0],[-157.9242,21.3206,0],[103.6822,32.8533,1],[106.725,20.8194,0],[34.8867,32.0114,0],[145.755,-16.8858,0],[36.9278,-1.3192,0],[28.246,-26.1392,0],[69.2812,41.2579,0],[99.7287,6.3297,0],[142.718,46.8887,0],[.235,51.885,0],[115.967,-31.9403,0],[130.877,-12.4147,0],[104.119,1.121,0],[132.148,43.399,0],[103.67,1.6413,0],[123.8535,9.6654,0],[37.9063,55.4088,0],[37.2615,55.5915,0],[49.2787,55.6062,0],[30.8947,50.345,0],[130.302,33.1497,0],[119.9117,47.3106,1],[109.706,31.064,1]];","import airports from './airports.json';\n\nexport function compute_flight_paths(buffer) {\n  // A sequence of [from_index, to_index, count] tuples, where from_index and\n  // to_index are indexes in airports.json. Each entry in airports.json is\n  // [lon, lat, is_china]\n  const array = new Uint16Array(buffer);\n\n  const depart_centers = [];\n  const arrive_centers = [];\n  const point_index = [];\n\n  for (let i = 0; i < array.length; i += 3) {\n    const [depart_lon, depart_lat, depart_china] = airports[array[i]];\n    const [arrive_lon, arrive_lat, arrive_china] = airports[array[i + 1]];\n\n    // Treat each point as the centroid of a triangle. Construct a triangle\n    // with vertices 0deg, 120deg, and 240deg from the angle of the flight.\n    // This actually happens in the vertex shader, this is just ammunition.\n\n    for (let j = 0; j < 3; j++) {\n      depart_centers.push(depart_lon, depart_lat);\n      arrive_centers.push(arrive_lon, arrive_lat);\n      point_index.push(j);\n    }\n  }\n\n  return {\n    a_depart_center: depart_centers,\n    a_arrive_center: arrive_centers,\n    point_index,\n  };\n}\n\nexport function compute_borders(buffer) {\n  // First uint32 (4 bytes) contain the number of line strings.\n  const count = new Uint32Array(buffer, 0, 1)[0];\n  // Each of the next `count` uint32s stores the vertex count of a line string.\n  const indices = new Uint32Array(buffer, 4, count);\n  // Rest of bytes contain vertex coordinates (alternating long-lat pairs)\n  const coords = new Float32Array(buffer, 4 * (indices.length + 1));\n\n  const vertices = [];\n  let v = 0;\n\n  for (let i = 0; i < indices.length; i += 1) {\n    const len = indices[i];\n\n    let a = [coords[v++], coords[v++]];\n\n    for (let j = 1; j < len; j += 1) {\n      const b = [coords[v++], coords[v++]];\n\n      vertices.push(...a, ...b);\n\n      a = b;\n    }\n  }\n\n  return new Float32Array(vertices);\n}\n","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D planeTexture;\\n\\nvarying vec2 v_position;\\nvarying float v_depth;\\n\\nvoid main() {\\n  if (v_depth < 0.) {\\n    discard;\\n  }\\n\\n  vec2 position = v_position;\\n\\n  // Scale a bit relative to (0.5, 0.5) (the center of the image)\\n  position -= vec2(0.5);\\n  position *= 1.15;\\n  position += vec2(0.5);\\n\\n  // Final adjustments since there's some padding on airplane.png\\n  position.y += 0.2;\\n\\n  vec4 texture_color = texture2D(planeTexture, position);\\n\\n  gl_FragColor = vec4(0.67, 0.02, 0.31, texture_color.a);\\n}\\n\";","module.exports=\"#define PI 3.1415926538\\n\\nvec3 project(vec2 point, float longitude_offset) {\\n  point *= PI / 180.;\\n  float lon = point[0];\\n  float lat = point[1];\\n\\n  float azimuth = lon - longitude_offset;\\n  float inclination = PI / 2. - lat;\\n\\n  float depth = sin(inclination) * cos(azimuth);\\n  float x = sin(inclination) * sin(azimuth);\\n  float y = cos(inclination);\\n\\n  return vec3(x, y, depth);\\n}\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\nuniform float longitude_offset;\\n\\nuniform float elapsed;\\nuniform float speed;\\nuniform float size;\\n\\n// attribute vec2 a_depart_point;\\n// attribute vec2 a_arrive_point;\\nattribute vec2 a_depart_center;\\nattribute vec2 a_arrive_center;\\nattribute float point_index;\\n\\nvarying vec2 v_position;\\nvarying float v_depth;\\n\\nmat2 rotate2d(float _angle) {\\n  return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\\n}\\n\\nvec3 project_with_offset(vec2 point) {\\n  return project(point, longitude_offset);\\n}\\n\\nvoid main() {\\n  vec3 depart_center = project_with_offset(a_depart_center);\\n  vec3 arrive_center = project_with_offset(a_arrive_center);\\n\\n  vec3 span = arrive_center - depart_center;\\n  float angle = atan(span.y, span.x);\\n  float theta = angle - point_index * (2. / 3.) * PI;\\n\\n  vec3 delta = size * vec3(cos(theta), sin(theta), 0);\\n\\n  vec3 depart_point = depart_center + delta;\\n  vec3 arrive_point = arrive_center + delta;\\n\\n  // TODO: adjust for the curvature of the Earth\\n  float travel_time = distance(depart_center, arrive_center) / speed;\\n  float t = mod(elapsed / travel_time, 1.);\\n\\n  vec3 position = mix(depart_point, arrive_point, t);\\n  vec3 center = mix(depart_center, arrive_center, t);\\n\\n  v_depth = position.z;\\n\\n  // 1. Center triangle at the origin\\n\\n  v_position = (position - center).xy;\\n\\n  // 2. Rotate so that the triangle points up\\n\\n  float desired_angle = PI / 2.;\\n  v_position *= rotate2d(desired_angle - angle);\\n\\n  // 3. Shrink triangle by SIZE. The result is a triangle with altitude =\\n  // 1 + 1/2 and a side length of √3. We want a side length of 1, so we shrink\\n  // the triangle again by √3.\\n\\n  v_position /= size * sqrt(3.);\\n\\n  // 4, Now just place triangle bottom left tip at (0, 0)\\n\\n  v_position += vec2(0.5, sqrt(3.) / 6.);\\n\\n  gl_Position = vec4(position.xy / aspectRatio, 0, 1);\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying float v_depth;\\n\\nvoid main() {\\n  // Discard when depth is negative, whether interpolated or not.\\n  if (v_depth < 0.) {\\n    discard;\\n  }\\n\\n  gl_FragColor = vec4(vec3(230. / 255.), 1.);\\n}\\n\";","module.exports=\"#define PI 3.1415926538\\n\\nvec3 project(vec2 point, float longitude_offset) {\\n  point *= PI / 180.;\\n  float lon = point[0];\\n  float lat = point[1];\\n\\n  float azimuth = lon - longitude_offset;\\n  float inclination = PI / 2. - lat;\\n\\n  float depth = sin(inclination) * cos(azimuth);\\n  float x = sin(inclination) * sin(azimuth);\\n  float y = cos(inclination);\\n\\n  return vec3(x, y, depth);\\n}\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\nuniform float longitude_offset;\\n\\nattribute vec2 position;\\n\\nvarying float v_depth;\\n\\nvoid main() {\\n  vec3 projected_position = project(position, longitude_offset);\\n\\n  v_depth = projected_position.z;\\n\\n  gl_Position = vec4(projected_position.xy / aspectRatio, 0, 1);\\n}\\n\";","module.exports=\"#define PI 3.1415926538\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D landTexture;\\nuniform sampler2D monoTexture;\\nuniform float longitude_offset;\\n\\nvarying vec2 v_position;\\n\\nvec3 LIGHT_REVERSED = vec3(-0.5, 0.5, 1);\\nfloat LIGHT_MAG = length(LIGHT_REVERSED);\\n\\nvoid main() {\\n\\n  // The screen is the tangent plane. Each (x, y) we treat as an\\n  // orthographically projected point of the front-facing hemisphere.\\n  // The textures are equirectangular projections, which means the position of\\n  // an image pixel is just the longitude-latitude.\\n  // For each fragment, then, we must figure out the corresponding lat-long to\\n  // retrieve the correct image pixel.\\n\\n  // 1. Define the projected coordinates.\\n  //    Discard fragments outside the great circle.\\n\\n  float x = v_position.x;\\n  float y = v_position.y;\\n  float c = x * x + y * y; // Distance from center of orthographic projection\\n\\n  if (sqrt(c) > 1.) {\\n    discard;\\n  }\\n\\n  // 2. Invert projection to get spherical coordinates\\n\\n  float depth = sqrt(1. - c); // Purposefully ignoring negative face\\n  float longitude = atan(x / depth) + longitude_offset; // [-PI / 2, PI / 2]\\n  float latitude = asin(y);                             // [-PI / 2, PI / 2]\\n\\n  // 3. Do equirectangular projection to get plane/texture coordinates\\n  //    For longitude: Map to [0.25, 0.75] (center is 0.5, range is 0.5)\\n  //    For latitude: Map to [0, 1] (center is 0.5, range is 0.5)\\n\\n  float texture_x = (longitude + PI) / (2. * PI);\\n  float texture_y = (latitude + PI / 2.) / PI;\\n\\n  // 4. Grab texture colors. Black = land, white = no land.\\n\\n  vec2 texture_position = vec2(mod(texture_x, 1.0), texture_y);\\n  vec3 texture_color = texture2D(landTexture, texture_position).rgb;\\n  vec3 mono_color = texture2D(monoTexture, texture_position).rgb;\\n\\n  texture_color += vec3(240. / 255.) * mono_color;\\n\\n  // 5. Calculate lighting.\\n\\n  float dotted = dot(vec3(x, y, depth), LIGHT_REVERSED) / LIGHT_MAG;\\n  float light = sign(dotted) * pow(dotted, 1.2);\\n  light = min(1.0, 0.55 + light * 0.3);\\n\\n  gl_FragColor = vec4(texture_color, 1.);\\n  gl_FragColor.rgb *= light;\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\n\\nattribute vec2 position;\\n\\nvarying vec2 v_position;\\n\\nvoid main() {\\n  // For some reason textures only cover the first quadrant of the clip space.\\n  // Remember that v_position should become the coordinate of the texture in\\n  // clip space. Cutting position in half means that (1, 1) in the clip space\\n  // becomes (0.5, 0.5) on the texture.\\n  // two quadrants' worth of space.\\n  // Adding 0.5 to position means that (1, 1) in the clip space becomes (1, 1)\\n  // on the texture, and similarly (0, 0) -> (0.5, 0.5) (the texture's center)\\n  // and (-1, -1) -> (0, 0).\\n\\n  // v_position = 0.5 + position * 0.5;\\n  v_position = position * aspectRatio;\\n\\n  // gl_Position should be position because the position attribute covers the\\n  // whole clip space\\n  gl_Position = vec4(position, 0, 1);\\n}\\n\";","import createREGL from 'regl';\nimport { compute_borders, compute_flight_paths } from './vertices';\n\nimport flightsFrag from './shaders/flights.frag';\nimport flightsVert from './shaders/flights.vert';\nimport bordersFrag from './shaders/borders.frag';\nimport bordersVert from './shaders/borders.vert';\nimport textureFrag from './shaders/texture.frag';\nimport textureVert from './shaders/texture.vert';\n\nimport specImg from './specularity@2x.png';\nimport monoImg from './mono@2x.png';\nimport planeImg from './airplane.png';\nimport borderData from './borders.dat';\nimport flightData from './20200123.dat';\n\nconst regl = createREGL();\n\nconst base =\n  'https://static01.nyt.com/newsgraphics/2020/02/04/coronavirus-flights/67d5b188d41684d2a82da11e94e358b4a769735e';\n\nasync function getBorders() {\n  return fetch(`./${borderData}`)\n    .then(response => response.arrayBuffer())\n    .then(buffer => compute_borders(buffer));\n}\n\nasync function getTexture(filename) {\n  return new Promise(resolve => {\n    const image = new Image();\n    image.src = filename; // `${base}/textures/${filename}`;\n    image.crossOrigin = '';\n    image.onload = () => resolve(regl.texture({ data: image, flipY: true }));\n  });\n}\n\nasync function getFlights() {\n  return fetch(`./${flightData}`)\n    .then(response => response.arrayBuffer())\n    .then(buffer => compute_flight_paths(buffer));\n}\n\nconst longitude_offset = regl.prop('longitude_offset');\n\nfunction createLineDrawer(vertices) {\n  return regl({\n    frag: bordersFrag,\n    vert: bordersVert,\n\n    uniforms: {\n      aspectRatio,\n      longitude_offset,\n    },\n\n    blend: {\n      enable: true,\n      func: {\n        src: 'src alpha',\n        dst: 'one minus src alpha',\n      },\n    },\n    depth: { enable: false },\n    attributes: { position: vertices },\n\n    count: vertices.length / 2,\n    primitive: 'lines',\n  });\n}\n\nasync function main() {\n  const [\n    borders,\n    flights,\n    landTexture,\n    monoTexture,\n    planeTexture,\n  ] = await Promise.all([\n    getBorders(),\n    getFlights(),\n    getTexture(specImg), // 'specularity@2x.png'\n    getTexture(monoImg), // 'mono@2x.png'\n    getTexture(planeImg),\n  ]);\n\n  const drawBorders = createLineDrawer(borders);\n\n  const drawFlights = regl({\n    frag: flightsFrag,\n    vert: flightsVert,\n\n    uniforms: {\n      planeTexture,\n      longitude_offset,\n      elapsed: regl.prop('elapsed'),\n      aspectRatio,\n\n      speed: 0.001,\n      size: 0.03, // Also equals 2/3 * altitude because we're at centroid\n    },\n\n    attributes: flights,\n\n    blend: {\n      enable: true,\n      func: {\n        src: 'src alpha',\n        dst: 'one minus src alpha',\n      },\n    },\n    depth: { enable: false },\n\n    count: flights.a_depart_center.length / 3,\n    primitive: 'triangles',\n  });\n\n  const drawTexture = regl({\n    frag: textureFrag,\n    vert: textureVert,\n\n    uniforms: {\n      landTexture,\n      monoTexture,\n      aspectRatio,\n      longitude_offset,\n    },\n\n    attributes: {\n      // Two triangles that cover the whole clip space\n      position: regl.buffer([\n        [-1, 1],\n        [1, -1],\n        [1, 1],\n        [-1, 1],\n        [1, -1],\n        [-1, -1],\n      ]),\n    },\n\n    count: 6,\n  });\n\n  regl.frame(({ time }) => {\n    const longitude_offset = time / 2;\n    // let longitude_offset = Math.PI / 2;\n\n    drawTexture({ longitude_offset });\n    drawBorders({ longitude_offset });\n    drawFlights({ longitude_offset, elapsed: time * 1000 });\n  });\n}\n\nmain().catch(console.error);\n\nfunction aspectRatio({ viewportWidth, viewportHeight }) {\n  const ar = viewportWidth / viewportHeight;\n  return ar > 1 ? [ar, 1] : [1, 1 / ar];\n}\n"]}